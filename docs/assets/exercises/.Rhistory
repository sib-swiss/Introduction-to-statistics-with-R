identify_outliers(as.data.frame(bmi.female)) #presence of 12 outliers
#Examining outliers
male.df <- subset(IS_23_exam, IS_23_exam$Gender == "male")
subset(male.df, male.df$bmi > 31.93) # corresponding to very obese males, kept
female.df <- subset(IS_23_exam, IS_23_exam$Gender == "female")
subset(female.df, female.df$bmi > 29.30) # corresponding to very obese females, kept
#BMI comparison between males and females using non parametric test
wilcox.test(bmi.male, bmi.female) #non parametric test (data not normally distributed)
##Q2. How strong is the linear (Pearson) correlation between chest girth and height? Is it significant?
#testing normality (assumption for Pearson)
shapiro.test(IS_23_exam$Height)      #showing not normalized subset, therefore need to confirm Pearson by a non-parametric method
shapiro.test(IS_23_exam$Chest_girth) #showing not normalized subset, therefore need to confirm Pearson by a non-parametric method
plot(IS_23_exam$Height, IS_23_exam$Chest_girth,
xlab="Height", ylab="Chest girth")
abline(lm(IS_23_exam$Chest_girth ~ IS_23_exam$Height), col= "red", lwd=3)
#Spearman correlation (sample not normalized)
cor(IS_23_exam$Height, IS_23_exam$Chest_girth, method="spearman")       # r=0.632 which is strong according to Evans
cor.test(IS_23_exam$Height, IS_23_exam$Chest_girth, method="spearman")  # p-value is < 2.2e-16 so strongly statistically significant
#Pearson correlation (still useful, given the linear pattern in the plot)
cor(IS_23_exam$Height, IS_23_exam$Chest_girth)       # r=0.618 which is strong according to Evans
cor.test(IS_23_exam$Height, IS_23_exam$Chest_girth)  # p-value is < 2.2e-16 so strongly statistically significant
##Q3. If you model a linear relationship, how much does the chest girth increase per added cm of height? Is the change significant?
summary(lm(IS_23_exam$Chest_girth ~ IS_23_exam$Height)) # chest girth increases by 0.65cm per added cm of height, which is significant (p<2e-16)
## 3b) What are the names and types of the variables?
colnames(IS_23_exam) #Age, Weight, Height, Gender, Shoulder_girth, Chest_girth,
#Waist_girth, Abdominal_girth and Hip_girth
dplyr::glimpse(IS_23_exam) #Age and Gender are integer and the rest of doubles
## 3c) Get the summary statistics of “IS_23_exam”.
IS_23_exam$Gender <- as.factor(IS_23_exam$Gender) #Converting Gender to fct
IS_23_exam$Age <- as.double(IS_23_exam$Age) # Converting Age to dbl
summary(IS_23_exam) # Summary statistics by variable
## 4) Make a scatter plot of all pairs of variables in the dataset.
# Pairs with Gender removed as pair and incorporated as color
pairs(IS_23_exam[ , c(1:3, 5:9)], col = IS_23_exam$Gender, pch = 18)
## 5)Calculate the BMI of each person and add it as an extra variable “bmi” to your dataframe.
IS_23_examBMI <-
IS_23_exam %>% mutate(bmi = IS_23_exam$Weight/((IS_23_exam$Height / 100)^2)) %>%
hablar::convert(dbl(bmi))
mean(IS_23_examBMI$bmi) # Mean of all genders
sd(IS_23_examBMI$bmi) # BMI SD of both genders
IS_23_examBMI %>%
ggplot(aes(x = Gender,
y = bmi,
fill = Gender)) +
geom_boxplot(width = .7,
size = .5,
alpha = .3,
show.legend = TRUE,
draw_quantiles =TRUE) # Boxplot Comparing the two genders
IS_23_examBMI <-
IS_23_exam %>% mutate(bmi = IS_23_exam$Weight/((IS_23_exam$Height / 100)^2)) %>%
hablar::convert(dbl(bmi))
library(hablar)
install.packages("hablar") #Installing "hablar" for variable type conversion
library(hablar)
## 5)Calculate the BMI of each person and add it as an extra variable “bmi” to your dataframe.
IS_23_examBMI <-
IS_23_exam %>% mutate(bmi = IS_23_exam$Weight/((IS_23_exam$Height / 100)^2)) %>%
hablar::convert(dbl(bmi))
IS_23_examBMI %>%
ggplot(aes(x = Gender,
y = bmi,
fill = Gender)) +
geom_boxplot(width = .7,
size = .5,
alpha = .3,
show.legend = TRUE,
draw_quantiles =TRUE) # Boxplot Comparing the two genders
# Testing normality
ggqqplot(IS_23_examBMI, "bmi") # Normality both genders
ggqqplot(IS_23_examBMI %>% dplyr::filter(Gender == 1), "bmi") # Normality in Gender 1
## 3c) Get the summary statistics of “IS_23_exam”.
IS_23_exam$Gender <- as.factor(IS_23_exam$Gender) #Converting Gender to fct
IS_23_exam$Age <- as.double(IS_23_exam$Age) # Converting Age to dbl
summary(IS_23_exam) #
## 4) Make a scatter plot of all pairs of variables in the dataset.
# Pairs with Gender removed as pair and incorporated as color
pairs(IS_23_exam[ , c(1:3, 5:9)], col = IS_23_exam$Gender, pch = 18)
## 5)Calculate the BMI of each person and add it as an extra variable “bmi” to your dataframe.
IS_23_examBMI <-
IS_23_exam %>% mutate(bmi = IS_23_exam$Weight/((IS_23_exam$Height / 100)^2)) %>%
hablar::convert(dbl(bmi))
## 1) Is there a significant difference in bmi means between males and females?
# Summary Stats and "exploratory" Boxplot
mean(IS_23_examBMI$bmi) # Mean of all genders
sd(IS_23_examBMI$bmi) # BMI SD of both genders
IS_23_examBMI %>%
ggplot(aes(x = Gender,
y = bmi,
fill = Gender)) +
geom_boxplot(width = .7,
size = .5,
alpha = .3,
show.legend = TRUE,
draw_quantiles =TRUE) # Boxplot Comparing the two genders
# Testing normality
ggqqplot(IS_23_examBMI, "bmi") # Normality both genders
ggqqplot(IS_23_examBMI %>% dplyr::filter(Gender == 1), "bmi") # Normality in Gender 1
ggqqplot(IS_23_examBMI %>% dplyr::filter(Gender == 2), "bmi") # Normality in Gender 2
shapiro_test(IS_23_examBMI$bmi) # Shapiro test both genders
# Shapiro Test Gender 1
shapiro_test(IS_23_examBMI %>% dplyr::filter(Gender == 1) %>% pull(bmi))
library(dplyr)
ggqqplot(IS_23_examBMI %>% dplyr::filter(Gender == 1), "bmi") # Normality in Gender 1
ggqqplot(IS_23_examBMI %>% dplyr::filter(Gender == 2), "bmi") # Normality in Gender 2
shapiro_test(IS_23_examBMI$bmi) # Shapiro test both genders
# Shapiro Test Gender 1
shapiro_test(IS_23_examBMI %>% dplyr::filter(Gender == 1) %>% pull(bmi))
# Shapiro Test Gender 2
shapiro_test(IS_23_examBMI %>% dplyr::filter(Gender == 2) %>% pull(bmi))
# Performing T-test
t.test(IS_23_examBMI %>% dplyr::filter(Gender == 1) %>% pull(bmi),
IS_23_examBMI %>% dplyr::filter(Gender == 2) %>% pull(bmi))
exam <- IS_23_exam
#4)Make a scatter plot of all pairs of variables in the dataset.
plot(exam)
plot(exam[,-4])
?levene_test
IS_23_exam %>%
group_by(Gender) %>%
shapiro_test(bmi)
ggqqplot(IS_23_exam, "bmi", facet.by = "Gender")
shapiro_test(IS_23_exam$Chest_girth)
shapiro_test(IS_23_exam$Height)
res <- cor.test(IS_23_exam$Chest_girth, IS_23_exam$Height,
method = "pearson")
pca<-prcomp(IS_23_exam,center=TRUE,scale.=FALSE)
names(IS_23_exam)
IS_23_exam[,!(colnames(IS_23_exam)%in%c("Gender","Age"))]
devtools::install_github("Acare/hacksig")
library(hacksig)
data_percentage<- cbind(c("a","b","c"),c(10,20,30))
barplot(height=as.matrix(data_percentage),
xlim=c(0, ncol(data_percentage) + 10),
col=my_colours , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
barplot(height=as.matrix(data_percentage),
xlim=c(0, ncol(data_percentage) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
ConnLines(as.matrix(data_percentage), col = "lightgray")
library(desc)
ConnLines(as.matrix(data_percentage), col = "lightgray")
install.packages(descTools)
install.packages("descTools")
install.packages("DescTools")
library("DescTools")
# Make a stacked barplot--> it will be in %!
barplot(height=as.matrix(data_percentage),
xlim=c(0, ncol(data_percentage) + 10),
col=my_colours , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
ConnLines(as.matrix(data_percentage), col = "lightgray")
barplot(height=as.matrix(data_percentage),
xlim=c(0, ncol(data_percentage) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
ConnLines(as.matrix(data_percentage), col = "lightgray")
barplot(height=as.matrix(data_percentage),
xlim=c(0, ncol(data_percentage) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
ConnLines(as.matrix(data_percentage), col = "lightgray")
barplot(height=as.matrix(data_percentage),
xlim=c(0, ncol(data_percentage) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
barplot(height=as.matrix(data_percentage),
xlim=c(0, ncol(data_percentage) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
ConnLines(as.matrix(data_percentage), col = "lightgray")
tab <- with(
subset(d.pizza, driver %in% c("Carpenter","Miller","Farmer","Butcher")),
table(factor(driver), Weekday(date, "dd", stringsAsFactor=TRUE))
)
tab
barplot(tab, beside=FALSE, space=1.2)
ConnLines(tab, beside=FALSE, space=1.2, lcol="grey50", lwd=1, lty=2)
# Clean workspace
rm(list=ls())
# Work dir
work_dir <- "/Users/Rachel/ownCloud/Nadine/Results_ScTCRseq/"
data_dir <- "/Users/Rachel/ownCloud/Nadine/ScTCRseq/New/TCR/master_folder2/"
#####################
# LIBRARIES         #
#####################
#install.packages('tinytex')
#tinytex::install_tinytex()
#update.packages(ask = FALSE, checkBuilt = TRUE)
#tinytex::tlmgr_update()
#tinytex:::install_prebuilt()
#BiocManager::install("DESeq2")
library("immunarch")
library("ggpubr")
library("knitr")
library("rmarkdown")
library("Seurat")
#install.packages("pander")
library(pander)
opts_chunk$set(tidy=FALSE, dev=c("png","pdf"),
message = FALSE,
fig.width = 6,
fig.height = 6,
fig.retina = 2)
panderOptions('table.alignment.default',
function(df) ifelse(df, is.numeric(),'right','left'))
panderOptions('knitr.auto.asis', FALSE)
immdata <- repLoad(paste0("/Users/Rachel/ownCloud/Nadine/ScTCRseq/New/TCR/","master_folder2"))
s <- list.files("/Users/Rachel/ownCloud/Nadine/ScTCRseq/New/TCR/")[-c(1:7)]
samples <- gsub("_","",gsub("\\d_","",gsub("Sample_\\d","",s)))
weeks <- gsub("_","",gsub("Sample_","",substr(s,1,9)))
tumor <- c(rep("AKP",3),"C",rep("AKP",3),"C",rep("AKP",3),"C",rep("AKP",2),"C")
length(immdata$data)
length(immdata$meta)
immdata$meta$Sample_name <-factor(s,levels= c( "Sample_6_c", "Sample_6_2" , "Sample_6_3",   "Sample_12_c","Sample_12_1", "Sample_12_2","Sample_12_3" ,"Sample_18_c" , "Sample_18_1", "Sample_18_2", "Sample_18_3","Sample_24_c", "Sample_24_1" ,"Sample_24_2"
, "Sample_24_3"  ))
immdata$meta$weeks <- paste0("W",weeks)
immdata$meta$tumor <- tumor
print(names(immdata$data))
immdata$data <- immdata$data[c(15,13,14,4,1,2,3,8,5,6,7,12,9,10,11)]
print(names(immdata$data))
immdata$meta <- immdata$meta[c(15,13,14,4,1,2,3,8,5,6,7,12,9,10,11),]
names(immdata$data) <- gsub("_filtered_contig_annotations","",gsub("Sample_","S",immdata$meta$Sample_name))
immdata$meta$Sample <-gsub("_filtered_contig_annotations","",gsub("Sample_","S",immdata$meta$Sample_name))
cal <- repClonality(immdata$data, "homeo")
CL <- repClonality(immdata$data, "homeo") %>% vis()
CL
d <- as.matrix(cal)
d
barplot(height=as.matrix(d),
xlim=c(0, ncol(d) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(d) + 10,
y=max(colSums(d)), bty = "n"), las=2)
d <- t(d)
barplot(height=as.matrix(d),
xlim=c(0, ncol(d) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(d) + 10,
y=max(colSums(d)), bty = "n"), las=2)
barplot(height=as.matrix(d),
xlim=c(0, ncol(d) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(d) + 10,
y=max(colSums(d)), bty = "n"), las=2)
d <- as.matrix(cal)
head(d)
?repClonality
CL
imm_pr <- repClonality(immdata$data, .method = "clonal.prop")
rownames(imm_pr) <- paste(c(paste0("A",1:9),paste0("B",1:6)),immdata$meta$Sample)
CL1 <- vis(imm_pr)
CL1+scale_x_discrete( labels=immdata$meta$Sample)
CL1+scale_x_discrete( labels=immdata$meta$Sample)
imm_top <- repClonality(immdata$data, .method = "top", .head = c(10, 100, 1000, 3000, 10000))
rownames(imm_top) <- paste(c(paste0("A",1:9),paste0("B",1:6)),immdata$meta$Sample)
vis(imm_top)+scale_x_discrete( labels=immdata$meta$Sample)
vis(imm_top)+scale_x_discrete( labels=immdata$meta$Sample)
vis(imm_top)+scale_x_discrete( labels=immdata$meta$Sample)
imm_rare <- repClonality(immdata$data, .method = "rare")
rownames(imm_rare) <- paste(c(paste0("A",1:9),paste0("B",1:6)),immdata$meta$Sample)
vis(imm_rare) +scale_x_discrete( labels=immdata$meta$Sample)
vis(imm_rare)+scale_x_discrete( labels=immdata$meta$Sample)
vis(imm_rare)+scale_x_discrete( labels=immdata$meta$Sample)
d <- as.matrix(imm_rare)
d
d[,2]<- d[,2]-d[,1]
d[,3]<-d[,3]-as.matrix(imm_rare)[,2]
d[,4]<-d[,4]-as.matrix(imm_rare)[,3]
d[,5]<-d[,5]-as.matrix(imm_rare)[,4]
d[,6]<-d[,6]-as.matrix(imm_rare)[,5]
d
barplot(height=as.matrix(d),
xlim=c(0, ncol(data_percentage) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
barplot(height=as.matrix(d),
xlim=c(0, ncol(d) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(d) + 10,
y=max(colSums(d)), bty = "n"), las=2)
barplot(height=as.matrix(data_percentage),
xlim=c(0, ncol(data_percentage) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(data_percentage) + 10,
y=max(colSums(data_percentage)), bty = "n"), las=2)
barplot(height=as.matrix(d),
xlim=c(0, ncol(d) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(d) + 10,
y=max(colSums(d)), bty = "n"), las=2)
d2 <- t(d)
barplot(height=as.matrix(d2),
xlim=c(0, ncol(d2) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(d2) + 10,
y=max(colSums(d2)), bty = "n"), las=2)
d
d2
dim(d2)
rowMeans(d2[,c(2,3)])
sum(rowMeans(d2[,c(2,3)]))
dnew <- cbind(rowMeans(d2[,c(2,3)]),rowMeans(d2[,c(5,6,7)]),rowMeans(d2[,c(9,10,11)]),rowMeans(d2[,c(13,14,15)]))
dnew
colnames(dnew)<- c("W6","W12","W18","W24")
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("black","blue","green") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
colorRampPalette(c("#67001f", "#d6604d", "#f7f7f7", "#4393c3", "#053061")
)
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("#67001f", "#d6604d", "#f7f7f7", "#4393c3", "#053061") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("#67001f", "#d6604d", "#f7f7f7", "#4393c3", "#053061") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=colorRampPalette(c("#67001f", "#d6604d", "#f7f7f7", "#4393c3", "#053061"))(1024) , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
colorRampPalette(c(.colourblind_vector()[5], grey_col))(2)
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("chartreuse3", "darkorchid4", "brown2", "cornflowerblue") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
.colourblind_discrete(length(unique(.data$Grouping.var)))
.colourblind_discrete(
)
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("#FF4B20", "#FFB433", "#C6FDEC", "#7AC5FF", "#0348A6") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("#FF4B20", "#FFB433","sand", "#C6FDEC", "#7AC5FF", "#0348A6") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("#FF4B20", "#FFB433","mocassin", "#C6FDEC", "#7AC5FF", "#0348A6") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
colnames(dnew)<- c("W6","W12","W18","W24")
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("#FF4B20", "#FFB433","moccasin", "#C6FDEC", "#7AC5FF", "#0348A6") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
ConnLines(as.matrix(data_percentage), col = "lightgray")
barplot(height=as.matrix(dnew),
xlim=c(0, ncol(dnew) + 10),
col=c("#FF4B20", "#FFB433","moccasin", "#C6FDEC", "#7AC5FF", "#0348A6") , border="white", xlab="",legend.text = TRUE,
args.legend= list(x=ncol(dnew) + 10,
y=max(colSums(dnew)), bty = "n"), las=2)
ConnLines(as.matrix(dnew), col = "lightgray")
dnew
melt(dnew)
melted_dnew <- melt(dnew)
ggplot(as.data.frame(melted_dnew),
aes(y = value, axis1 = Var1, axis2 = Var2)) +
geom_alluvium(aes(fill = Var1), width = 1/12) +
geom_stratum(width = 1/12, fill =c("black") , color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))
library(ggalluvial)
ggplot(as.data.frame(melted_dnew),
aes(y = value, axis1 = Var1, axis2 = Var2)) +
geom_alluvium(aes(fill = Var1), width = 1/12) +
geom_stratum(width = 1/12, fill =c("black") , color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))
ggplot(as.data.frame(melted_dnew),
aes(y = value, alluvium = Var1, stratum = Var2)) +
geom_alluvium(aes(fill = Var1), width = 1/12) +
geom_stratum(width = 1/12, fill =c("black") , color = "grey") +
geom_label(stat = "stratum", aes(label = after_stat(stratum)))
ggplot(as.data.frame(melted_dnew),
aes(x = value, stratum = Var2, alluvium = Var1,
fill = Var2, label = Var2)) +
scale_fill_brewer(type = "qual", palette = "Set2") +
geom_flow(stat = "alluvium", lode.guidance = "frontback",
color = "darkgray") +
geom_stratum() +
theme(legend.position = "bottom") +
ggtitle("student curricula across several semesters")
summary(as.data.frame(melted_dnew))
help('alluvial-data')
is_alluvia_form(as.data.frame(melted_dnew))
to_lodes_form(
as.data.frame(melted_dnew),
...,
axes = NULL,
key = "x",
value = "stratum",
id = "alluvium",
diffuse = FALSE,
discern = FALSE
)
to_lodes_form(
as.data.frame(melted_dnew),
axes = NULL,
key = "x",
value = "stratum",
id = "alluvium",
diffuse = FALSE,
discern = FALSE
)
to_alluvia_form(as.data.frame(melted_dnew))
to_alluvia_form(as.data.frame(melted_dnew))
to_alluvia_form(as.data.frame(melted_dnew))
to_alluvia_form(as.data.frame(melted_dnew),key="Var1",value="value")
to_alluvia_form(as.data.frame(melted_dnew),key="Var1",value="value",id="Var2")
ggplot(to_alluvia_form(as.data.frame(melted_dnew),key="Var1",value="value",id="Var2"),
aes(x = value, stratum = Var2, alluvium = Var1,
fill = Var2, label = Var2)) +
scale_fill_brewer(type = "qual", palette = "Set2") +
geom_flow(stat = "alluvium", lode.guidance = "frontback",
color = "darkgray") +
geom_stratum() +
theme(legend.position = "bottom") +
ggtitle("student curricula across several semesters")
ggplot(as.data.frame(melted_dnew),
aes(x = value, stratum = Var2, alluvium = Var1,
fill = Var2, label = Var2))
fill = Var2, label = Var2))
ggplot(as.data.frame(melted_dnew),
aes(x = value, stratum = Var2, alluvium = Var1,
fill = Var2, label = Var2))
ggplot(as.data.frame(melted_dnew),
aes(x = value, stratum = Var2, alluvium = Var1,
fill = Var2, label = Var2)) +
scale_fill_brewer(type = "qual", palette = "Set2") +
geom_flow(stat = "alluvium", lode.guidance = "frontback",
color = "darkgray")
data(majors)
majors
to_alluvia_form(as.data.frame(melted_dnew),key="Var1",value="value",id="Var2")
to_lodes_form(as.data.frame(melted_dnew),key="Var1",value="value",id="Var2")
to_lodes_form(as.data.frame(dnew),key="Var1",value="value",id="Var2")
ggplot(to_lodes_form(as.data.frame(dnew),key="Var1",value="value",id="Var2"),
aes(x = value, stratum = Var2, alluvium = Var1,
fill = Var2, label = Var2)) +
scale_fill_brewer(type = "qual", palette = "Set2") +
geom_flow(stat = "alluvium", lode.guidance = "frontback",
color = "darkgray") +
geom_stratum() +
theme(legend.position = "bottom")
to_lodes_form(as.data.frame(dnew),key = "x", value = "stratum", id = "alluvium")
to_lodes_form(as.data.frame(dnew),key = "x", value = "stratum", id = "alluvium")
to_alluvial_form(as.data.frame(dnew),key="Var1",value="value",id="Var2")
to_alluvia_form(as.data.frame(dnew),key="Var1",value="value",id="Var2")
to_alluvia_form(as.data.frame(melted_dnew),key="Var1",value="value",id="Var2")
majors_alluvia <- to_alluvia_form(as.data.frame(dnew),key="Var1",value="value",id="Var2")
majors_alluvia <- to_alluvia_form(as.data.frame(melted_dnew),key="Var1",value="value",id="Var2")
majors_alluvia <- to_alluvia_form(as.data.frame(melted_dnew),id="Var1",value="value",key="Var2")
majors_alluvia
majors_alluvia
gg <- ggplot(majors_alluvia,
aes(axis1 = W6, axis2 = W12, axis3 = W18,axis4=W24))
gg +
geom_alluvium(aes(fill = as.factor(Var1)), width = 2/5, discern = TRUE) +
geom_stratum(width = 2/5, discern = TRUE)
melted_dnew
gg <- ggplot(melted_dnew,
aes(y=value, x=Var2))
gg +
geom_alluvium(aes(fill = as.factor(Var1)), width = 2/5, discern = TRUE) +
geom_stratum(width = 2/5, discern = TRUE) +
geom_text(stat = "stratum", discern = TRUE, aes(label = after_stat(stratum)))
lodes_alluvia <- to_lodes_form(as.data.frame(melted_dnew),id="Var1",value="value",key="Var2")
lodes_alluvia
lodes_alluvia
majors
data(vaccinations)
vaccinations <- transform(vaccinations,
response = factor(response, rev(levels(response))))
vaccinations
melted_dnew
melted_dnew
ggplot(melted_dnew,
aes(x = Var2, stratum = Var1, alluvium = Var1,
y = value,
fill = Var1, label = Var1)) +
scale_x_discrete(expand = c(.1, .1)) +
geom_flow() +
geom_stratum(alpha = .5)
ggplot(melted_dnew,
aes(x = Var2, stratum = Var1, alluvium = Var1,
y = value,
fill = Var1, label = Var1)) +
scale_x_discrete(expand = c(.1, .1)) +
geom_flow() +
geom_stratum(alpha = .5)
melted_dnew
?RunPCA
RunPCA
